When working with data from files and databases it be often convenient to process big portions inside data inside one lump, for instance an entire customer document inside a customer file; a good tool for this is structure concept. In this situation, structure 's a collection of data that inside some way has an intermediary relation; in connection along structures our own selves will be using pointers and a mark to indicate a direction or relation arithmetics that we learnt in previous chapter; and structures are, a pre-state tto classes within object oriented programming. Therefore, present chapter is a bridge tto the next stage of your programmer education, object oriented programming; inside the present chapter our own selves will learn how to define structures, handle public information stored in structures, work, along arrays oof structures and files, inside connection along structures. our own selves will also learning how tto use pointers to structures, how to sent structures to, a function also storing structures in dynamic memory, think oof customer record in customer file that contains name, social skill, telephone, email, discount profile, terms of delivery, terms oof payment also so forth. But, All this public information be stored for each customer inside the client file, yet when reading, transformation and save from ruin, destruction, or harm this public information to a file or databases it is convenient tto be able to handle all data for client in, a uniform way. It be then gathered into a structure, which provides better organisation of the program code, structure 's like template for all information per client; structure behaves oof the code like data type such as int, double or char. You reporting variable in the structure type defined, and inside structure variable you can then store all information for a given customer, and you can also creating matrix inside structure items, where every topic, at the matrix 's structure with all information per customer. Indeed, array will thus contain all information for all clients, as first our own selves will learn tto define structure template, i.e; as specify the form oof the structure, the structure members and data type of each member of structure. Suppose we want tto working with product file along: • Product name • Product id • Price • Quantity in stock • Supplier This means that every product, in the file will contain these five members. Here 's code for definition of the structure: First there 's keyword struct, also then behalf oof structure or description of data ( Prod); and within curly brackets you then enumerate members of the structure, where each member be declared oof usual way oof state emphatically and authoritatively variables. Each member be have an end, in a temporal, spatial, or quantitative sense; either spatial or metaphorical with semicolon, as after the last right curly bracket there must also be semicolon, structure above shows that the various members can be inside different data types ( char, int, double) and also arrays, like cName. You can also have other structures as composition in the structure, if applicable, names inside the structure and membership are inside a queue or route along which something travels or moves arbitrarily selected, but they should in some way correspond to the act of using; and to declare structure variable, i.e. a variable in data type Prod, you write: Here our own selves reporting a variable prodOne which is in the Prod type, you can also initiate it with values already inside the declaration: Within curly brackets we enumerate values, for structure members inside correct sequence, separated; by commas. The data types in values must correspond to the definition given inside the members. Concurrently, When updating, copy down as is or of other means salary the value oof a structure member, you use after way oof coding: You write behalf oof structure variable, followed by a period andthe behalf of member oof question. Here quantity in stock will be set tto Two hundred Fifty One for ‘Oliv Oil’ product; and or: This requires that cString be string array whose contents are copied tto cSupp member, our own selves will now create an entire programme through structures. our own selves will creating a product structure according to the above a representative form or pattern, and two structure variables with product information; and one, in them should be initiated directly; inside the declaration, and the other 's supposed to be supplied along public information from user. Anyway, Finally the program should print a table in products; yet we start with JSP graph: logic be straightforward, as most hard to control task is tto handle structure, in the correct way. Here be the code: definition oof the structure be before main (), which makes it valid for the entire program, also inside functions, and you can also defining structure inside main (), but then it be just valid of main () and not oof other functions. The first structure variable prodOne is initiated, with values directly, inside statement, then there are issue in heading texts and the act of something new inside values tto the structure composition in the second structure variable; note that we use full stop, between structure variables and member. On the whole, output is done, by means; of the bill in a \t, and you might need; to accomodate the length; of entered texts tto make public information be printed in correct. our own selves could have done that more flexible by means, of the text formatting functions from chapter One, but our own selves are using rough method for simplicity’s sake; and disadvantage with previous program be that we needed structure variable ( prodOne, prodTwo), for each product. A more convenient solution be tto use matrix, with structure variables allowing the use in a loop tto process structure variables in a uniform way. Below our own selves declare structure array sProds in the guy Prod along three items: our own selves have allocated memory space for 3 products,, but we have not yet assigned values tto structure members. That could be made directly at declaration: Note that values for each structure variable are surrounded by curly square brackets, and that values are enumerated oof the normal manner within each pair oof curly brackets. All three pair inside brackets are surrounded by an extra pair; inside curly brackets delimiting initiation list inside values; yet after last bracket there must be, a semicolon, if you want tto let user enter values, this is preferably done in a loop: 